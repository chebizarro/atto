/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: mbgl.i

#define SWIGMODULE mbgl

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern char* _cgo_topofstack(void) __attribute__ ((weak));
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static char *_swig_topofstack() {
  if (_cgo_topofstack) {
    return _cgo_topofstack();
  } else {
    return 0;
  }
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } SWIGSTRUCTPACKED a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#include <mbgl/map/map.hpp>
#include <mbgl/util/image.hpp>
#include <mbgl/util/default_styles.hpp>
#include <mbgl/gl/headless_frontend.hpp>
#include <mbgl/util/default_thread_pool.hpp>
#include <mbgl/storage/default_file_source.hpp>
#include <mbgl/style/style.hpp>

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_mbgl_e07083a70cf0d8aa(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_mbgl_e07083a70cf0d8aa(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


mbgl::Map *_wrap_new_Map__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::RendererFrontend *_swig_go_0, MapObserver *_swig_go_1, Size *_swig_go_2, float _swig_go_3, mbgl::FileSource *_swig_go_4, mbgl::Scheduler *_swig_go_5, MapMode *_swig_go_6, ConstrainMode *_swig_go_7, ViewportMode *_swig_go_8) {
  mbgl::RendererFrontend *arg1 = 0 ;
  MapObserver *arg2 = 0 ;
  Size arg3 ;
  float arg4 ;
  mbgl::FileSource *arg5 = 0 ;
  mbgl::Scheduler *arg6 = 0 ;
  MapMode arg7 ;
  ConstrainMode arg8 ;
  ViewportMode arg9 ;
  Size *argp3 ;
  MapMode *argp7 ;
  ConstrainMode *argp8 ;
  ViewportMode *argp9 ;
  mbgl::Map *result = 0 ;
  mbgl::Map *_swig_go_result;
  
  arg1 = *(mbgl::RendererFrontend **)&_swig_go_0; 
  arg2 = *(MapObserver **)&_swig_go_1; 
  
  argp3 = (Size *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg3 = (Size)*argp3;
  
  arg4 = (float)_swig_go_3; 
  arg5 = *(mbgl::FileSource **)&_swig_go_4; 
  arg6 = *(mbgl::Scheduler **)&_swig_go_5; 
  
  argp7 = (MapMode *)_swig_go_6;
  if (argp7 == NULL) {
    _swig_gopanic("Attempt to dereference null MapMode");
  }
  arg7 = (MapMode)*argp7;
  
  
  argp8 = (ConstrainMode *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ConstrainMode");
  }
  arg8 = (ConstrainMode)*argp8;
  
  
  argp9 = (ViewportMode *)_swig_go_8;
  if (argp9 == NULL) {
    _swig_gopanic("Attempt to dereference null ViewportMode");
  }
  arg9 = (ViewportMode)*argp9;
  
  
  result = (mbgl::Map *)new mbgl::Map(*arg1,*arg2,arg3,arg4,*arg5,*arg6,arg7,arg8,arg9);
  *(mbgl::Map **)&_swig_go_result = (mbgl::Map *)result; 
  return _swig_go_result;
}


mbgl::Map *_wrap_new_Map__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::RendererFrontend *_swig_go_0, MapObserver *_swig_go_1, Size *_swig_go_2, float _swig_go_3, mbgl::FileSource *_swig_go_4, mbgl::Scheduler *_swig_go_5, MapMode *_swig_go_6, ConstrainMode *_swig_go_7) {
  mbgl::RendererFrontend *arg1 = 0 ;
  MapObserver *arg2 = 0 ;
  Size arg3 ;
  float arg4 ;
  mbgl::FileSource *arg5 = 0 ;
  mbgl::Scheduler *arg6 = 0 ;
  MapMode arg7 ;
  ConstrainMode arg8 ;
  Size *argp3 ;
  MapMode *argp7 ;
  ConstrainMode *argp8 ;
  mbgl::Map *result = 0 ;
  mbgl::Map *_swig_go_result;
  
  arg1 = *(mbgl::RendererFrontend **)&_swig_go_0; 
  arg2 = *(MapObserver **)&_swig_go_1; 
  
  argp3 = (Size *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg3 = (Size)*argp3;
  
  arg4 = (float)_swig_go_3; 
  arg5 = *(mbgl::FileSource **)&_swig_go_4; 
  arg6 = *(mbgl::Scheduler **)&_swig_go_5; 
  
  argp7 = (MapMode *)_swig_go_6;
  if (argp7 == NULL) {
    _swig_gopanic("Attempt to dereference null MapMode");
  }
  arg7 = (MapMode)*argp7;
  
  
  argp8 = (ConstrainMode *)_swig_go_7;
  if (argp8 == NULL) {
    _swig_gopanic("Attempt to dereference null ConstrainMode");
  }
  arg8 = (ConstrainMode)*argp8;
  
  
  result = (mbgl::Map *)new mbgl::Map(*arg1,*arg2,arg3,arg4,*arg5,*arg6,arg7,arg8);
  *(mbgl::Map **)&_swig_go_result = (mbgl::Map *)result; 
  return _swig_go_result;
}


mbgl::Map *_wrap_new_Map__SWIG_2_mbgl_e07083a70cf0d8aa(mbgl::RendererFrontend *_swig_go_0, MapObserver *_swig_go_1, Size *_swig_go_2, float _swig_go_3, mbgl::FileSource *_swig_go_4, mbgl::Scheduler *_swig_go_5, MapMode *_swig_go_6) {
  mbgl::RendererFrontend *arg1 = 0 ;
  MapObserver *arg2 = 0 ;
  Size arg3 ;
  float arg4 ;
  mbgl::FileSource *arg5 = 0 ;
  mbgl::Scheduler *arg6 = 0 ;
  MapMode arg7 ;
  Size *argp3 ;
  MapMode *argp7 ;
  mbgl::Map *result = 0 ;
  mbgl::Map *_swig_go_result;
  
  arg1 = *(mbgl::RendererFrontend **)&_swig_go_0; 
  arg2 = *(MapObserver **)&_swig_go_1; 
  
  argp3 = (Size *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg3 = (Size)*argp3;
  
  arg4 = (float)_swig_go_3; 
  arg5 = *(mbgl::FileSource **)&_swig_go_4; 
  arg6 = *(mbgl::Scheduler **)&_swig_go_5; 
  
  argp7 = (MapMode *)_swig_go_6;
  if (argp7 == NULL) {
    _swig_gopanic("Attempt to dereference null MapMode");
  }
  arg7 = (MapMode)*argp7;
  
  
  result = (mbgl::Map *)new mbgl::Map(*arg1,*arg2,arg3,arg4,*arg5,*arg6,arg7);
  *(mbgl::Map **)&_swig_go_result = (mbgl::Map *)result; 
  return _swig_go_result;
}


mbgl::Map *_wrap_new_Map__SWIG_3_mbgl_e07083a70cf0d8aa(mbgl::RendererFrontend *_swig_go_0, MapObserver *_swig_go_1, Size *_swig_go_2, float _swig_go_3, mbgl::FileSource *_swig_go_4, mbgl::Scheduler *_swig_go_5) {
  mbgl::RendererFrontend *arg1 = 0 ;
  MapObserver *arg2 = 0 ;
  Size arg3 ;
  float arg4 ;
  mbgl::FileSource *arg5 = 0 ;
  mbgl::Scheduler *arg6 = 0 ;
  Size *argp3 ;
  mbgl::Map *result = 0 ;
  mbgl::Map *_swig_go_result;
  
  arg1 = *(mbgl::RendererFrontend **)&_swig_go_0; 
  arg2 = *(MapObserver **)&_swig_go_1; 
  
  argp3 = (Size *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg3 = (Size)*argp3;
  
  arg4 = (float)_swig_go_3; 
  arg5 = *(mbgl::FileSource **)&_swig_go_4; 
  arg6 = *(mbgl::Scheduler **)&_swig_go_5; 
  
  result = (mbgl::Map *)new mbgl::Map(*arg1,*arg2,arg3,arg4,*arg5,*arg6);
  *(mbgl::Map **)&_swig_go_result = (mbgl::Map *)result; 
  return _swig_go_result;
}


void _wrap_delete_Map_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Map_renderStill__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, std::function< void (std::exception_ptr) > *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  mbgl::Map::StillImageCallback arg2 ;
  mbgl::Map::StillImageCallback *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (mbgl::Map::StillImageCallback *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null mbgl::Map::StillImageCallback");
  }
  arg2 = (mbgl::Map::StillImageCallback)*argp2;
  
  
  (arg1)->renderStill(arg2);
  
}


void _wrap_Map_renderStill__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, CameraOptions *_swig_go_1, MapDebugOptions *_swig_go_2, std::function< void (std::exception_ptr) > *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  CameraOptions *arg2 = 0 ;
  MapDebugOptions arg3 ;
  mbgl::Map::StillImageCallback arg4 ;
  MapDebugOptions *argp3 ;
  mbgl::Map::StillImageCallback *argp4 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(CameraOptions **)&_swig_go_1; 
  
  argp3 = (MapDebugOptions *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null MapDebugOptions");
  }
  arg3 = (MapDebugOptions)*argp3;
  
  
  argp4 = (mbgl::Map::StillImageCallback *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null mbgl::Map::StillImageCallback");
  }
  arg4 = (mbgl::Map::StillImageCallback)*argp4;
  
  
  (arg1)->renderStill((CameraOptions const &)*arg2,arg3,arg4);
  
}


void _wrap_Map_triggerRepaint_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  (arg1)->triggerRepaint();
  
}


mbgl::style::Style *_wrap_Map_getStyle__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  mbgl::style::Style *result = 0 ;
  mbgl::style::Style *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (mbgl::style::Style *) &(arg1)->getStyle();
  *(mbgl::style::Style **)&_swig_go_result = result; 
  return _swig_go_result;
}


mbgl::style::Style *_wrap_Map_getStyle__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  mbgl::style::Style *result = 0 ;
  mbgl::style::Style *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (mbgl::style::Style *) &((mbgl::Map const *)arg1)->getStyle();
  *(mbgl::style::Style **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_setStyle_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, std::unique_ptr< mbgl::style::Style > *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  SwigValueWrapper< std::unique_ptr< mbgl::style::Style > > arg2 ;
  std::unique_ptr< mbgl::style::Style > *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (std::unique_ptr< mbgl::style::Style > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::unique_ptr< mbgl::style::Style >");
  }
  arg2 = (std::unique_ptr< mbgl::style::Style >)*argp2;
  
  
  (arg1)->setStyle(arg2);
  
}


void _wrap_Map_cancelTransitions_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  (arg1)->cancelTransitions();
  
}


void _wrap_Map_setGestureInProgress_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, bool _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  bool arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->setGestureInProgress(arg2);
  
}


bool _wrap_Map_isGestureInProgress_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (bool)((mbgl::Map const *)arg1)->isGestureInProgress();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Map_isRotating_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (bool)((mbgl::Map const *)arg1)->isRotating();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Map_isScaling_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (bool)((mbgl::Map const *)arg1)->isScaling();
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Map_isPanning_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (bool)((mbgl::Map const *)arg1)->isPanning();
  _swig_go_result = result; 
  return _swig_go_result;
}


CameraOptions *_wrap_Map_getCameraOptions_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, EdgeInsets *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  EdgeInsets *arg2 = 0 ;
  CameraOptions result;
  CameraOptions *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(EdgeInsets **)&_swig_go_1; 
  
  result = ((mbgl::Map const *)arg1)->getCameraOptions((EdgeInsets const &)*arg2);
  *(CameraOptions **)&_swig_go_result = new CameraOptions(result); 
  return _swig_go_result;
}


void _wrap_Map_jumpTo_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, CameraOptions *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  CameraOptions *arg2 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(CameraOptions **)&_swig_go_1; 
  
  (arg1)->jumpTo((CameraOptions const &)*arg2);
  
}


void _wrap_Map_easeTo_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, CameraOptions *_swig_go_1, AnimationOptions *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  CameraOptions *arg2 = 0 ;
  AnimationOptions *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(CameraOptions **)&_swig_go_1; 
  arg3 = *(AnimationOptions **)&_swig_go_2; 
  
  (arg1)->easeTo((CameraOptions const &)*arg2,(AnimationOptions const &)*arg3);
  
}


void _wrap_Map_flyTo_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, CameraOptions *_swig_go_1, AnimationOptions *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  CameraOptions *arg2 = 0 ;
  AnimationOptions *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(CameraOptions **)&_swig_go_1; 
  arg3 = *(AnimationOptions **)&_swig_go_2; 
  
  (arg1)->flyTo((CameraOptions const &)*arg2,(AnimationOptions const &)*arg3);
  
}


CameraOptions *_wrap_Map_cameraForLatLngBounds__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLngBounds *_swig_go_1, EdgeInsets *_swig_go_2, optional< double > *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLngBounds *arg2 = 0 ;
  EdgeInsets *arg3 = 0 ;
  optional< double > arg4 ;
  optional< double > *argp4 ;
  CameraOptions result;
  CameraOptions *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLngBounds **)&_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  
  argp4 = (optional< double > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< double >");
  }
  arg4 = (optional< double >)*argp4;
  
  
  result = ((mbgl::Map const *)arg1)->cameraForLatLngBounds((LatLngBounds const &)*arg2,(EdgeInsets const &)*arg3,arg4);
  *(CameraOptions **)&_swig_go_result = new CameraOptions(result); 
  return _swig_go_result;
}


CameraOptions *_wrap_Map_cameraForLatLngBounds__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLngBounds *_swig_go_1, EdgeInsets *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLngBounds *arg2 = 0 ;
  EdgeInsets *arg3 = 0 ;
  CameraOptions result;
  CameraOptions *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLngBounds **)&_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  
  result = ((mbgl::Map const *)arg1)->cameraForLatLngBounds((LatLngBounds const &)*arg2,(EdgeInsets const &)*arg3);
  *(CameraOptions **)&_swig_go_result = new CameraOptions(result); 
  return _swig_go_result;
}


CameraOptions *_wrap_Map_cameraForLatLngs__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, std::vector< LatLng > *_swig_go_1, EdgeInsets *_swig_go_2, optional< double > *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  std::vector< LatLng > *arg2 = 0 ;
  EdgeInsets *arg3 = 0 ;
  optional< double > arg4 ;
  optional< double > *argp4 ;
  CameraOptions result;
  CameraOptions *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(std::vector< LatLng > **)&_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  
  argp4 = (optional< double > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< double >");
  }
  arg4 = (optional< double >)*argp4;
  
  
  result = ((mbgl::Map const *)arg1)->cameraForLatLngs((std::vector< LatLng > const &)*arg2,(EdgeInsets const &)*arg3,arg4);
  *(CameraOptions **)&_swig_go_result = new CameraOptions(result); 
  return _swig_go_result;
}


CameraOptions *_wrap_Map_cameraForLatLngs__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, std::vector< LatLng > *_swig_go_1, EdgeInsets *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  std::vector< LatLng > *arg2 = 0 ;
  EdgeInsets *arg3 = 0 ;
  CameraOptions result;
  CameraOptions *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(std::vector< LatLng > **)&_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  
  result = ((mbgl::Map const *)arg1)->cameraForLatLngs((std::vector< LatLng > const &)*arg2,(EdgeInsets const &)*arg3);
  *(CameraOptions **)&_swig_go_result = new CameraOptions(result); 
  return _swig_go_result;
}


CameraOptions *_wrap_Map_cameraForGeometry__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, Geometry< double > *_swig_go_1, EdgeInsets *_swig_go_2, optional< double > *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  Geometry< double > *arg2 = 0 ;
  EdgeInsets *arg3 = 0 ;
  optional< double > arg4 ;
  optional< double > *argp4 ;
  CameraOptions result;
  CameraOptions *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(Geometry< double > **)&_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  
  argp4 = (optional< double > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< double >");
  }
  arg4 = (optional< double >)*argp4;
  
  
  result = ((mbgl::Map const *)arg1)->cameraForGeometry((Geometry< double > const &)*arg2,(EdgeInsets const &)*arg3,arg4);
  *(CameraOptions **)&_swig_go_result = new CameraOptions(result); 
  return _swig_go_result;
}


CameraOptions *_wrap_Map_cameraForGeometry__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, Geometry< double > *_swig_go_1, EdgeInsets *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  Geometry< double > *arg2 = 0 ;
  EdgeInsets *arg3 = 0 ;
  CameraOptions result;
  CameraOptions *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(Geometry< double > **)&_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  
  result = ((mbgl::Map const *)arg1)->cameraForGeometry((Geometry< double > const &)*arg2,(EdgeInsets const &)*arg3);
  *(CameraOptions **)&_swig_go_result = new CameraOptions(result); 
  return _swig_go_result;
}


LatLngBounds *_wrap_Map_latLngBoundsForCamera_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, CameraOptions *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  CameraOptions *arg2 = 0 ;
  LatLngBounds result;
  LatLngBounds *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(CameraOptions **)&_swig_go_1; 
  
  result = ((mbgl::Map const *)arg1)->latLngBoundsForCamera((CameraOptions const &)*arg2);
  *(LatLngBounds **)&_swig_go_result = new LatLngBounds(result); 
  return _swig_go_result;
}


void _wrap_Map_moveBy__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, ScreenCoordinate *_swig_go_1, AnimationOptions *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  ScreenCoordinate *arg2 = 0 ;
  AnimationOptions *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(ScreenCoordinate **)&_swig_go_1; 
  arg3 = *(AnimationOptions **)&_swig_go_2; 
  
  (arg1)->moveBy((ScreenCoordinate const &)*arg2,(AnimationOptions const &)*arg3);
  
}


void _wrap_Map_moveBy__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, ScreenCoordinate *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  ScreenCoordinate *arg2 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(ScreenCoordinate **)&_swig_go_1; 
  
  (arg1)->moveBy((ScreenCoordinate const &)*arg2);
  
}


void _wrap_Map_setLatLng__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1, optional< ScreenCoordinate > *_swig_go_2, AnimationOptions *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  optional< ScreenCoordinate > arg3 ;
  AnimationOptions *arg4 = 0 ;
  optional< ScreenCoordinate > *argp3 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  
  argp3 = (optional< ScreenCoordinate > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< ScreenCoordinate >");
  }
  arg3 = (optional< ScreenCoordinate >)*argp3;
  
  arg4 = *(AnimationOptions **)&_swig_go_3; 
  
  (arg1)->setLatLng((LatLng const &)*arg2,arg3,(AnimationOptions const &)*arg4);
  
}


void _wrap_Map_setLatLng__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1, optional< ScreenCoordinate > *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  optional< ScreenCoordinate > arg3 ;
  optional< ScreenCoordinate > *argp3 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  
  argp3 = (optional< ScreenCoordinate > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< ScreenCoordinate >");
  }
  arg3 = (optional< ScreenCoordinate >)*argp3;
  
  
  (arg1)->setLatLng((LatLng const &)*arg2,arg3);
  
}


void _wrap_Map_setLatLng__SWIG_2_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1, EdgeInsets *_swig_go_2, AnimationOptions *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  EdgeInsets *arg3 = 0 ;
  AnimationOptions *arg4 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  arg4 = *(AnimationOptions **)&_swig_go_3; 
  
  (arg1)->setLatLng((LatLng const &)*arg2,(EdgeInsets const &)*arg3,(AnimationOptions const &)*arg4);
  
}


void _wrap_Map_setLatLng__SWIG_3_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1, EdgeInsets *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  EdgeInsets *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  
  (arg1)->setLatLng((LatLng const &)*arg2,(EdgeInsets const &)*arg3);
  
}


void _wrap_Map_setLatLng__SWIG_4_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1, AnimationOptions *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  AnimationOptions *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  arg3 = *(AnimationOptions **)&_swig_go_2; 
  
  (arg1)->setLatLng((LatLng const &)*arg2,(AnimationOptions const &)*arg3);
  
}


void _wrap_Map_setLatLng__SWIG_5_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  
  (arg1)->setLatLng((LatLng const &)*arg2);
  
}


LatLng *_wrap_Map_getLatLng__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, EdgeInsets *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  EdgeInsets *arg2 = 0 ;
  LatLng result;
  LatLng *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(EdgeInsets **)&_swig_go_1; 
  
  result = ((mbgl::Map const *)arg1)->getLatLng((EdgeInsets const &)*arg2);
  *(LatLng **)&_swig_go_result = new LatLng(result); 
  return _swig_go_result;
}


LatLng *_wrap_Map_getLatLng__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng result;
  LatLng *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = ((mbgl::Map const *)arg1)->getLatLng();
  *(LatLng **)&_swig_go_result = new LatLng(result); 
  return _swig_go_result;
}


void _wrap_Map_resetPosition__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, EdgeInsets *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  EdgeInsets *arg2 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(EdgeInsets **)&_swig_go_1; 
  
  (arg1)->resetPosition((EdgeInsets const &)*arg2);
  
}


void _wrap_Map_resetPosition__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  (arg1)->resetPosition();
  
}


void _wrap_Map_setZoom__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, AnimationOptions *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  AnimationOptions *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = *(AnimationOptions **)&_swig_go_2; 
  
  (arg1)->setZoom(arg2,(AnimationOptions const &)*arg3);
  
}


void _wrap_Map_setZoom__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->setZoom(arg2);
  
}


void _wrap_Map_setZoom__SWIG_2_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, optional< ScreenCoordinate > *_swig_go_2, AnimationOptions *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  optional< ScreenCoordinate > arg3 ;
  AnimationOptions *arg4 = 0 ;
  optional< ScreenCoordinate > *argp3 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  argp3 = (optional< ScreenCoordinate > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< ScreenCoordinate >");
  }
  arg3 = (optional< ScreenCoordinate >)*argp3;
  
  arg4 = *(AnimationOptions **)&_swig_go_3; 
  
  (arg1)->setZoom(arg2,arg3,(AnimationOptions const &)*arg4);
  
}


void _wrap_Map_setZoom__SWIG_3_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, optional< ScreenCoordinate > *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  optional< ScreenCoordinate > arg3 ;
  optional< ScreenCoordinate > *argp3 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  argp3 = (optional< ScreenCoordinate > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< ScreenCoordinate >");
  }
  arg3 = (optional< ScreenCoordinate >)*argp3;
  
  
  (arg1)->setZoom(arg2,arg3);
  
}


void _wrap_Map_setZoom__SWIG_4_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, EdgeInsets *_swig_go_2, AnimationOptions *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  EdgeInsets *arg3 = 0 ;
  AnimationOptions *arg4 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  arg4 = *(AnimationOptions **)&_swig_go_3; 
  
  (arg1)->setZoom(arg2,(EdgeInsets const &)*arg3,(AnimationOptions const &)*arg4);
  
}


void _wrap_Map_setZoom__SWIG_5_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, EdgeInsets *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  EdgeInsets *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  
  (arg1)->setZoom(arg2,(EdgeInsets const &)*arg3);
  
}


double _wrap_Map_getZoom_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (double)((mbgl::Map const *)arg1)->getZoom();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_setLatLngZoom__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1, double _swig_go_2, AnimationOptions *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  double arg3 ;
  AnimationOptions *arg4 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = *(AnimationOptions **)&_swig_go_3; 
  
  (arg1)->setLatLngZoom((LatLng const &)*arg2,arg3,(AnimationOptions const &)*arg4);
  
}


void _wrap_Map_setLatLngZoom__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1, double _swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  double arg3 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  
  (arg1)->setLatLngZoom((LatLng const &)*arg2,arg3);
  
}


void _wrap_Map_setLatLngZoom__SWIG_2_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1, double _swig_go_2, EdgeInsets *_swig_go_3, AnimationOptions *_swig_go_4) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  double arg3 ;
  EdgeInsets *arg4 = 0 ;
  AnimationOptions *arg5 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = *(EdgeInsets **)&_swig_go_3; 
  arg5 = *(AnimationOptions **)&_swig_go_4; 
  
  (arg1)->setLatLngZoom((LatLng const &)*arg2,arg3,(EdgeInsets const &)*arg4,(AnimationOptions const &)*arg5);
  
}


void _wrap_Map_setLatLngZoom__SWIG_3_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1, double _swig_go_2, EdgeInsets *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  double arg3 ;
  EdgeInsets *arg4 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  arg3 = (double)_swig_go_2; 
  arg4 = *(EdgeInsets **)&_swig_go_3; 
  
  (arg1)->setLatLngZoom((LatLng const &)*arg2,arg3,(EdgeInsets const &)*arg4);
  
}


void _wrap_Map_resetZoom_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  (arg1)->resetZoom();
  
}


void _wrap_Map_setLatLngBounds_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, optional< LatLngBounds > *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  optional< LatLngBounds > arg2 ;
  optional< LatLngBounds > *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (optional< LatLngBounds > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< LatLngBounds >");
  }
  arg2 = (optional< LatLngBounds >)*argp2;
  
  
  (arg1)->setLatLngBounds(arg2);
  
}


optional< LatLngBounds > *_wrap_Map_getLatLngBounds_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  optional< LatLngBounds > result;
  optional< LatLngBounds > *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = ((mbgl::Map const *)arg1)->getLatLngBounds();
  *(optional< LatLngBounds > **)&_swig_go_result = new optional< LatLngBounds >(result); 
  return _swig_go_result;
}


void _wrap_Map_setMinZoom_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->setMinZoom(arg2);
  
}


double _wrap_Map_getMinZoom_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (double)((mbgl::Map const *)arg1)->getMinZoom();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_setMaxZoom_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->setMaxZoom(arg2);
  
}


double _wrap_Map_getMaxZoom_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (double)((mbgl::Map const *)arg1)->getMaxZoom();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_setMinPitch_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->setMinPitch(arg2);
  
}


double _wrap_Map_getMinPitch_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (double)((mbgl::Map const *)arg1)->getMinPitch();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_setMaxPitch_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->setMaxPitch(arg2);
  
}


double _wrap_Map_getMaxPitch_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (double)((mbgl::Map const *)arg1)->getMaxPitch();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_rotateBy__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, ScreenCoordinate *_swig_go_1, ScreenCoordinate *_swig_go_2, AnimationOptions *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  ScreenCoordinate *arg2 = 0 ;
  ScreenCoordinate *arg3 = 0 ;
  AnimationOptions *arg4 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(ScreenCoordinate **)&_swig_go_1; 
  arg3 = *(ScreenCoordinate **)&_swig_go_2; 
  arg4 = *(AnimationOptions **)&_swig_go_3; 
  
  (arg1)->rotateBy((ScreenCoordinate const &)*arg2,(ScreenCoordinate const &)*arg3,(AnimationOptions const &)*arg4);
  
}


void _wrap_Map_rotateBy__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, ScreenCoordinate *_swig_go_1, ScreenCoordinate *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  ScreenCoordinate *arg2 = 0 ;
  ScreenCoordinate *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(ScreenCoordinate **)&_swig_go_1; 
  arg3 = *(ScreenCoordinate **)&_swig_go_2; 
  
  (arg1)->rotateBy((ScreenCoordinate const &)*arg2,(ScreenCoordinate const &)*arg3);
  
}


void _wrap_Map_setBearing__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, AnimationOptions *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  AnimationOptions *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = *(AnimationOptions **)&_swig_go_2; 
  
  (arg1)->setBearing(arg2,(AnimationOptions const &)*arg3);
  
}


void _wrap_Map_setBearing__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->setBearing(arg2);
  
}


void _wrap_Map_setBearing__SWIG_2_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, optional< ScreenCoordinate > *_swig_go_2, AnimationOptions *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  optional< ScreenCoordinate > arg3 ;
  AnimationOptions *arg4 = 0 ;
  optional< ScreenCoordinate > *argp3 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  argp3 = (optional< ScreenCoordinate > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< ScreenCoordinate >");
  }
  arg3 = (optional< ScreenCoordinate >)*argp3;
  
  arg4 = *(AnimationOptions **)&_swig_go_3; 
  
  (arg1)->setBearing(arg2,arg3,(AnimationOptions const &)*arg4);
  
}


void _wrap_Map_setBearing__SWIG_3_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, optional< ScreenCoordinate > *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  optional< ScreenCoordinate > arg3 ;
  optional< ScreenCoordinate > *argp3 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  argp3 = (optional< ScreenCoordinate > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< ScreenCoordinate >");
  }
  arg3 = (optional< ScreenCoordinate >)*argp3;
  
  
  (arg1)->setBearing(arg2,arg3);
  
}


void _wrap_Map_setBearing__SWIG_4_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, EdgeInsets *_swig_go_2, AnimationOptions *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  EdgeInsets *arg3 = 0 ;
  AnimationOptions *arg4 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  arg4 = *(AnimationOptions **)&_swig_go_3; 
  
  (arg1)->setBearing(arg2,(EdgeInsets const &)*arg3,(AnimationOptions const &)*arg4);
  
}


void _wrap_Map_setBearing__SWIG_5_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, EdgeInsets *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  EdgeInsets *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = *(EdgeInsets **)&_swig_go_2; 
  
  (arg1)->setBearing(arg2,(EdgeInsets const &)*arg3);
  
}


double _wrap_Map_getBearing_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (double)((mbgl::Map const *)arg1)->getBearing();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_resetNorth__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, AnimationOptions *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  AnimationOptions *arg2 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(AnimationOptions **)&_swig_go_1; 
  
  (arg1)->resetNorth((AnimationOptions const &)*arg2);
  
}


void _wrap_Map_resetNorth__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  (arg1)->resetNorth();
  
}


void _wrap_Map_resetNorth__SWIG_2_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, EdgeInsets *_swig_go_1, AnimationOptions *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  EdgeInsets *arg2 = 0 ;
  AnimationOptions *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(EdgeInsets **)&_swig_go_1; 
  arg3 = *(AnimationOptions **)&_swig_go_2; 
  
  (arg1)->resetNorth((EdgeInsets const &)*arg2,(AnimationOptions const &)*arg3);
  
}


void _wrap_Map_resetNorth__SWIG_3_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, EdgeInsets *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  EdgeInsets *arg2 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(EdgeInsets **)&_swig_go_1; 
  
  (arg1)->resetNorth((EdgeInsets const &)*arg2);
  
}


void _wrap_Map_setPitch__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, AnimationOptions *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  AnimationOptions *arg3 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  arg3 = *(AnimationOptions **)&_swig_go_2; 
  
  (arg1)->setPitch(arg2,(AnimationOptions const &)*arg3);
  
}


void _wrap_Map_setPitch__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->setPitch(arg2);
  
}


void _wrap_Map_setPitch__SWIG_2_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, optional< ScreenCoordinate > *_swig_go_2, AnimationOptions *_swig_go_3) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  optional< ScreenCoordinate > arg3 ;
  AnimationOptions *arg4 = 0 ;
  optional< ScreenCoordinate > *argp3 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  argp3 = (optional< ScreenCoordinate > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< ScreenCoordinate >");
  }
  arg3 = (optional< ScreenCoordinate >)*argp3;
  
  arg4 = *(AnimationOptions **)&_swig_go_3; 
  
  (arg1)->setPitch(arg2,arg3,(AnimationOptions const &)*arg4);
  
}


void _wrap_Map_setPitch__SWIG_3_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1, optional< ScreenCoordinate > *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  optional< ScreenCoordinate > arg3 ;
  optional< ScreenCoordinate > *argp3 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  argp3 = (optional< ScreenCoordinate > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< ScreenCoordinate >");
  }
  arg3 = (optional< ScreenCoordinate >)*argp3;
  
  
  (arg1)->setPitch(arg2,arg3);
  
}


double _wrap_Map_getPitch_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (double)((mbgl::Map const *)arg1)->getPitch();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_setNorthOrientation_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, NorthOrientation *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  NorthOrientation arg2 ;
  NorthOrientation *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (NorthOrientation *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null NorthOrientation");
  }
  arg2 = (NorthOrientation)*argp2;
  
  
  (arg1)->setNorthOrientation(arg2);
  
}


NorthOrientation *_wrap_Map_getNorthOrientation_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  NorthOrientation result;
  NorthOrientation *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = ((mbgl::Map const *)arg1)->getNorthOrientation();
  *(NorthOrientation **)&_swig_go_result = new NorthOrientation(result); 
  return _swig_go_result;
}


void _wrap_Map_setConstrainMode_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, ConstrainMode *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  ConstrainMode arg2 ;
  ConstrainMode *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (ConstrainMode *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ConstrainMode");
  }
  arg2 = (ConstrainMode)*argp2;
  
  
  (arg1)->setConstrainMode(arg2);
  
}


ConstrainMode *_wrap_Map_getConstrainMode_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  ConstrainMode result;
  ConstrainMode *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = ((mbgl::Map const *)arg1)->getConstrainMode();
  *(ConstrainMode **)&_swig_go_result = new ConstrainMode(result); 
  return _swig_go_result;
}


void _wrap_Map_setViewportMode_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, ViewportMode *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  ViewportMode arg2 ;
  ViewportMode *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (ViewportMode *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ViewportMode");
  }
  arg2 = (ViewportMode)*argp2;
  
  
  (arg1)->setViewportMode(arg2);
  
}


ViewportMode *_wrap_Map_getViewportMode_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  ViewportMode result;
  ViewportMode *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = ((mbgl::Map const *)arg1)->getViewportMode();
  *(ViewportMode **)&_swig_go_result = new ViewportMode(result); 
  return _swig_go_result;
}


void _wrap_Map_setAxonometric_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, bool _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  bool arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->setAxonometric(arg2);
  
}


bool _wrap_Map_getAxonometric_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (bool)((mbgl::Map const *)arg1)->getAxonometric();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_setXSkew_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->setXSkew(arg2);
  
}


double _wrap_Map_getXSkew_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (double)((mbgl::Map const *)arg1)->getXSkew();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_setYSkew_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, double _swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double arg2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = (double)_swig_go_1; 
  
  (arg1)->setYSkew(arg2);
  
}


double _wrap_Map_getYSkew_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (double)((mbgl::Map const *)arg1)->getYSkew();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_setSize_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, Size *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  Size arg2 ;
  Size *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (Size *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg2 = (Size)*argp2;
  
  
  (arg1)->setSize(arg2);
  
}


Size *_wrap_Map_getSize_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  Size result;
  Size *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = ((mbgl::Map const *)arg1)->getSize();
  *(Size **)&_swig_go_result = new Size(result); 
  return _swig_go_result;
}


ScreenCoordinate *_wrap_Map_pixelForLatLng_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, LatLng *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  LatLng *arg2 = 0 ;
  ScreenCoordinate result;
  ScreenCoordinate *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(LatLng **)&_swig_go_1; 
  
  result = ((mbgl::Map const *)arg1)->pixelForLatLng((LatLng const &)*arg2);
  *(ScreenCoordinate **)&_swig_go_result = new ScreenCoordinate(result); 
  return _swig_go_result;
}


LatLng *_wrap_Map_latLngForPixel_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, ScreenCoordinate *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  ScreenCoordinate *arg2 = 0 ;
  LatLng result;
  LatLng *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(ScreenCoordinate **)&_swig_go_1; 
  
  result = ((mbgl::Map const *)arg1)->latLngForPixel((ScreenCoordinate const &)*arg2);
  *(LatLng **)&_swig_go_result = new LatLng(result); 
  return _swig_go_result;
}


void _wrap_Map_addAnnotationImage_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, std::unique_ptr< mbgl::style::Image > *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  SwigValueWrapper< std::unique_ptr< mbgl::style::Image > > arg2 ;
  std::unique_ptr< mbgl::style::Image > *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (std::unique_ptr< mbgl::style::Image > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::unique_ptr< mbgl::style::Image >");
  }
  arg2 = (std::unique_ptr< mbgl::style::Image >)*argp2;
  
  
  (arg1)->addAnnotationImage(arg2);
  
}


void _wrap_Map_removeAnnotationImage_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, std::string *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->removeAnnotationImage((std::string const &)*arg2);
  
}


double _wrap_Map_getTopOffsetPixelsForAnnotationImage_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, std::string *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  double _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (double)(arg1)->getTopOffsetPixelsForAnnotationImage((std::string const &)*arg2);
  _swig_go_result = result; 
  return _swig_go_result;
}


AnnotationID *_wrap_Map_addAnnotation_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, Annotation *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  Annotation *arg2 = 0 ;
  AnnotationID result;
  AnnotationID *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  arg2 = *(Annotation **)&_swig_go_1; 
  
  result = (arg1)->addAnnotation((Annotation const &)*arg2);
  *(AnnotationID **)&_swig_go_result = new AnnotationID(result); 
  return _swig_go_result;
}


void _wrap_Map_updateAnnotation_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, AnnotationID *_swig_go_1, Annotation *_swig_go_2) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  AnnotationID arg2 ;
  Annotation *arg3 = 0 ;
  AnnotationID *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (AnnotationID *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null AnnotationID");
  }
  arg2 = (AnnotationID)*argp2;
  
  arg3 = *(Annotation **)&_swig_go_2; 
  
  (arg1)->updateAnnotation(arg2,(Annotation const &)*arg3);
  
}


void _wrap_Map_removeAnnotation_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, AnnotationID *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  AnnotationID arg2 ;
  AnnotationID *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (AnnotationID *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null AnnotationID");
  }
  arg2 = (AnnotationID)*argp2;
  
  
  (arg1)->removeAnnotation(arg2);
  
}


void _wrap_Map_setPrefetchZoomDelta_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, uint8_t *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  uint8_t arg2 ;
  uint8_t *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (uint8_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null uint8_t");
  }
  arg2 = (uint8_t)*argp2;
  
  
  (arg1)->setPrefetchZoomDelta(arg2);
  
}


uint8_t *_wrap_Map_getPrefetchZoomDelta_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  uint8_t result;
  uint8_t *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = ((mbgl::Map const *)arg1)->getPrefetchZoomDelta();
  *(uint8_t **)&_swig_go_result = new uint8_t(result); 
  return _swig_go_result;
}


void _wrap_Map_setDebug_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0, MapDebugOptions *_swig_go_1) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  MapDebugOptions arg2 ;
  MapDebugOptions *argp2 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  argp2 = (MapDebugOptions *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null MapDebugOptions");
  }
  arg2 = (MapDebugOptions)*argp2;
  
  
  (arg1)->setDebug(arg2);
  
}


void _wrap_Map_cycleDebugOptions_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  (arg1)->cycleDebugOptions();
  
}


MapDebugOptions *_wrap_Map_getDebug_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  MapDebugOptions result;
  MapDebugOptions *_swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = ((mbgl::Map const *)arg1)->getDebug();
  *(MapDebugOptions **)&_swig_go_result = new MapDebugOptions(result); 
  return _swig_go_result;
}


bool _wrap_Map_isFullyLoaded_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  result = (bool)((mbgl::Map const *)arg1)->isFullyLoaded();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Map_dumpDebugLogs_mbgl_e07083a70cf0d8aa(mbgl::Map *_swig_go_0) {
  mbgl::Map *arg1 = (mbgl::Map *) 0 ;
  
  arg1 = *(mbgl::Map **)&_swig_go_0; 
  
  ((mbgl::Map const *)arg1)->dumpDebugLogs();
  
}


intgo _wrap_ImageAlphaMode_Unassociated_mbgl_e07083a70cf0d8aa() {
  mbgl::ImageAlphaMode result;
  intgo _swig_go_result;
  
  
  result = mbgl::ImageAlphaMode::Unassociated;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ImageAlphaMode_Premultiplied_mbgl_e07083a70cf0d8aa() {
  mbgl::ImageAlphaMode result;
  intgo _swig_go_result;
  
  
  result = mbgl::ImageAlphaMode::Premultiplied;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_ImageAlphaMode_Exclusive_mbgl_e07083a70cf0d8aa() {
  mbgl::ImageAlphaMode result;
  intgo _swig_go_result;
  
  
  result = mbgl::ImageAlphaMode::Exclusive;
  
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > *_wrap_decodeImage_mbgl_e07083a70cf0d8aa(std::string *_swig_go_0) {
  std::string *arg1 = 0 ;
  SwigValueWrapper< mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > > result;
  mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > *_swig_go_result;
  
  arg1 = *(std::string **)&_swig_go_0; 
  
  result = mbgl::decodeImage((std::string const &)*arg1);
  *(mbgl::PremultipliedImage **)&_swig_go_result = new mbgl::PremultipliedImage(result); 
  return _swig_go_result;
}


std::string *_wrap_encodePNG_mbgl_e07083a70cf0d8aa(mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > *_swig_go_0) {
  mbgl::PremultipliedImage *arg1 = 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(mbgl::PremultipliedImage **)&_swig_go_0; 
  
  result = mbgl::encodePNG((mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > const &)*arg1);
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


void _wrap_DefaultStyle_url_set_mbgl_e07083a70cf0d8aa(mbgl::util::default_styles::DefaultStyle *_swig_go_0, _gostring_ _swig_go_1) {
  mbgl::util::default_styles::DefaultStyle *arg1 = (mbgl::util::default_styles::DefaultStyle *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if (arg2) {
      arg1->url = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->url, (const char *)arg2);
    } else {
      arg1->url = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_DefaultStyle_url_get_mbgl_e07083a70cf0d8aa(mbgl::util::default_styles::DefaultStyle *_swig_go_0) {
  mbgl::util::default_styles::DefaultStyle *arg1 = (mbgl::util::default_styles::DefaultStyle *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_0; 
  
  result = (char *) ((arg1)->url);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


void _wrap_DefaultStyle_name_set_mbgl_e07083a70cf0d8aa(mbgl::util::default_styles::DefaultStyle *_swig_go_0, _gostring_ _swig_go_1) {
  mbgl::util::default_styles::DefaultStyle *arg1 = (mbgl::util::default_styles::DefaultStyle *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_0; 
  
  arg2 = (char *)malloc(_swig_go_1.n + 1);
  memcpy(arg2, _swig_go_1.p, _swig_go_1.n);
  arg2[_swig_go_1.n] = '\0';
  
  
  {
    if (arg2) {
      arg1->name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  
  free(arg2); 
}


_gostring_ _wrap_DefaultStyle_name_get_mbgl_e07083a70cf0d8aa(mbgl::util::default_styles::DefaultStyle *_swig_go_0) {
  mbgl::util::default_styles::DefaultStyle *arg1 = (mbgl::util::default_styles::DefaultStyle *) 0 ;
  char *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_0; 
  
  result = (char *) ((arg1)->name);
  _swig_go_result = Swig_AllocateString((char*)result, result ? strlen((char*)result) : 0); 
  return _swig_go_result;
}


intgo _wrap_DefaultStyle_currentVersion_get_mbgl_e07083a70cf0d8aa(mbgl::util::default_styles::DefaultStyle *_swig_go_0) {
  mbgl::util::default_styles::DefaultStyle *arg1 = (mbgl::util::default_styles::DefaultStyle *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_0; 
  
  result = (unsigned int)(unsigned int) ((arg1)->currentVersion);
  _swig_go_result = result; 
  return _swig_go_result;
}


mbgl::util::default_styles::DefaultStyle *_wrap_new_DefaultStyle_mbgl_e07083a70cf0d8aa() {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle *_swig_go_result;
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)new mbgl::util::default_styles::DefaultStyle();
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = (mbgl::util::default_styles::DefaultStyle *)result; 
  return _swig_go_result;
}


void _wrap_delete_DefaultStyle_mbgl_e07083a70cf0d8aa(mbgl::util::default_styles::DefaultStyle *_swig_go_0) {
  mbgl::util::default_styles::DefaultStyle *arg1 = (mbgl::util::default_styles::DefaultStyle *) 0 ;
  
  arg1 = *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_0; 
  
  delete arg1;
  
}


mbgl::util::default_styles::DefaultStyle *_wrap_streets_get_mbgl_e07083a70cf0d8aa() {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle *_swig_go_result;
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)&mbgl::util::default_styles::streets;
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = (mbgl::util::default_styles::DefaultStyle *)result; 
  return _swig_go_result;
}


mbgl::util::default_styles::DefaultStyle *_wrap_outdoors_get_mbgl_e07083a70cf0d8aa() {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle *_swig_go_result;
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)&mbgl::util::default_styles::outdoors;
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = (mbgl::util::default_styles::DefaultStyle *)result; 
  return _swig_go_result;
}


mbgl::util::default_styles::DefaultStyle *_wrap_light_get_mbgl_e07083a70cf0d8aa() {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle *_swig_go_result;
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)&mbgl::util::default_styles::light;
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = (mbgl::util::default_styles::DefaultStyle *)result; 
  return _swig_go_result;
}


mbgl::util::default_styles::DefaultStyle *_wrap_dark_get_mbgl_e07083a70cf0d8aa() {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle *_swig_go_result;
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)&mbgl::util::default_styles::dark;
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = (mbgl::util::default_styles::DefaultStyle *)result; 
  return _swig_go_result;
}


mbgl::util::default_styles::DefaultStyle *_wrap_satellite_get_mbgl_e07083a70cf0d8aa() {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle *_swig_go_result;
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)&mbgl::util::default_styles::satellite;
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = (mbgl::util::default_styles::DefaultStyle *)result; 
  return _swig_go_result;
}


mbgl::util::default_styles::DefaultStyle *_wrap_satelliteStreets_get_mbgl_e07083a70cf0d8aa() {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle *_swig_go_result;
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)&mbgl::util::default_styles::satelliteStreets;
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = (mbgl::util::default_styles::DefaultStyle *)result; 
  return _swig_go_result;
}


mbgl::util::default_styles::DefaultStyle *_wrap_trafficDay_get_mbgl_e07083a70cf0d8aa() {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle *_swig_go_result;
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)&mbgl::util::default_styles::trafficDay;
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = (mbgl::util::default_styles::DefaultStyle *)result; 
  return _swig_go_result;
}


mbgl::util::default_styles::DefaultStyle *_wrap_trafficNight_get_mbgl_e07083a70cf0d8aa() {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle *_swig_go_result;
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)&mbgl::util::default_styles::trafficNight;
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = (mbgl::util::default_styles::DefaultStyle *)result; 
  return _swig_go_result;
}


mbgl::util::default_styles::DefaultStyle (*_wrap_orderedStyles_get_mbgl_e07083a70cf0d8aa())[] {
  mbgl::util::default_styles::DefaultStyle *result = 0 ;
  mbgl::util::default_styles::DefaultStyle (*_swig_go_result)[];
  
  
  result = (mbgl::util::default_styles::DefaultStyle *)(mbgl::util::default_styles::DefaultStyle *)mbgl::util::default_styles::orderedStyles;
  *(mbgl::util::default_styles::DefaultStyle **)&_swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_numOrderedStyles_get_mbgl_e07083a70cf0d8aa() {
  size_t result;
  long long _swig_go_result;
  
  
  result = (size_t)mbgl::util::default_styles::numOrderedStyles;
  _swig_go_result = result; 
  return _swig_go_result;
}


mbgl::HeadlessFrontend *_wrap_new_HeadlessFrontend__SWIG_0_mbgl_e07083a70cf0d8aa(float _swig_go_0, mbgl::FileSource *_swig_go_1, mbgl::Scheduler *_swig_go_2, optional< std::string > *_swig_go_3, GLContextMode *_swig_go_4, optional< std::string > *_swig_go_5) {
  float arg1 ;
  mbgl::FileSource *arg2 = 0 ;
  mbgl::Scheduler *arg3 = 0 ;
  optional< std::string > arg4 ;
  GLContextMode arg5 ;
  optional< std::string > arg6 ;
  optional< std::string > const *argp4 ;
  GLContextMode *argp5 ;
  optional< std::string > const *argp6 ;
  mbgl::HeadlessFrontend *result = 0 ;
  mbgl::HeadlessFrontend *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(mbgl::FileSource **)&_swig_go_1; 
  arg3 = *(mbgl::Scheduler **)&_swig_go_2; 
  
  argp4 = (optional< std::string > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< std::string > const");
  }
  arg4 = (optional< std::string >)*argp4;
  
  
  argp5 = (GLContextMode *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null GLContextMode");
  }
  arg5 = (GLContextMode)*argp5;
  
  
  argp6 = (optional< std::string > *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< std::string > const");
  }
  arg6 = (optional< std::string >)*argp6;
  
  
  result = (mbgl::HeadlessFrontend *)new mbgl::HeadlessFrontend(arg1,*arg2,*arg3,arg4,arg5,arg6);
  *(mbgl::HeadlessFrontend **)&_swig_go_result = (mbgl::HeadlessFrontend *)result; 
  return _swig_go_result;
}


mbgl::HeadlessFrontend *_wrap_new_HeadlessFrontend__SWIG_1_mbgl_e07083a70cf0d8aa(float _swig_go_0, mbgl::FileSource *_swig_go_1, mbgl::Scheduler *_swig_go_2, optional< std::string > *_swig_go_3, GLContextMode *_swig_go_4) {
  float arg1 ;
  mbgl::FileSource *arg2 = 0 ;
  mbgl::Scheduler *arg3 = 0 ;
  optional< std::string > arg4 ;
  GLContextMode arg5 ;
  optional< std::string > const *argp4 ;
  GLContextMode *argp5 ;
  mbgl::HeadlessFrontend *result = 0 ;
  mbgl::HeadlessFrontend *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(mbgl::FileSource **)&_swig_go_1; 
  arg3 = *(mbgl::Scheduler **)&_swig_go_2; 
  
  argp4 = (optional< std::string > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< std::string > const");
  }
  arg4 = (optional< std::string >)*argp4;
  
  
  argp5 = (GLContextMode *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null GLContextMode");
  }
  arg5 = (GLContextMode)*argp5;
  
  
  result = (mbgl::HeadlessFrontend *)new mbgl::HeadlessFrontend(arg1,*arg2,*arg3,arg4,arg5);
  *(mbgl::HeadlessFrontend **)&_swig_go_result = (mbgl::HeadlessFrontend *)result; 
  return _swig_go_result;
}


mbgl::HeadlessFrontend *_wrap_new_HeadlessFrontend__SWIG_2_mbgl_e07083a70cf0d8aa(float _swig_go_0, mbgl::FileSource *_swig_go_1, mbgl::Scheduler *_swig_go_2, optional< std::string > *_swig_go_3) {
  float arg1 ;
  mbgl::FileSource *arg2 = 0 ;
  mbgl::Scheduler *arg3 = 0 ;
  optional< std::string > arg4 ;
  optional< std::string > const *argp4 ;
  mbgl::HeadlessFrontend *result = 0 ;
  mbgl::HeadlessFrontend *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(mbgl::FileSource **)&_swig_go_1; 
  arg3 = *(mbgl::Scheduler **)&_swig_go_2; 
  
  argp4 = (optional< std::string > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< std::string > const");
  }
  arg4 = (optional< std::string >)*argp4;
  
  
  result = (mbgl::HeadlessFrontend *)new mbgl::HeadlessFrontend(arg1,*arg2,*arg3,arg4);
  *(mbgl::HeadlessFrontend **)&_swig_go_result = (mbgl::HeadlessFrontend *)result; 
  return _swig_go_result;
}


mbgl::HeadlessFrontend *_wrap_new_HeadlessFrontend__SWIG_3_mbgl_e07083a70cf0d8aa(float _swig_go_0, mbgl::FileSource *_swig_go_1, mbgl::Scheduler *_swig_go_2) {
  float arg1 ;
  mbgl::FileSource *arg2 = 0 ;
  mbgl::Scheduler *arg3 = 0 ;
  mbgl::HeadlessFrontend *result = 0 ;
  mbgl::HeadlessFrontend *_swig_go_result;
  
  arg1 = (float)_swig_go_0; 
  arg2 = *(mbgl::FileSource **)&_swig_go_1; 
  arg3 = *(mbgl::Scheduler **)&_swig_go_2; 
  
  result = (mbgl::HeadlessFrontend *)new mbgl::HeadlessFrontend(arg1,*arg2,*arg3);
  *(mbgl::HeadlessFrontend **)&_swig_go_result = (mbgl::HeadlessFrontend *)result; 
  return _swig_go_result;
}


mbgl::HeadlessFrontend *_wrap_new_HeadlessFrontend__SWIG_4_mbgl_e07083a70cf0d8aa(Size *_swig_go_0, float _swig_go_1, mbgl::FileSource *_swig_go_2, mbgl::Scheduler *_swig_go_3, optional< std::string > *_swig_go_4, GLContextMode *_swig_go_5, optional< std::string > *_swig_go_6) {
  Size arg1 ;
  float arg2 ;
  mbgl::FileSource *arg3 = 0 ;
  mbgl::Scheduler *arg4 = 0 ;
  optional< std::string > arg5 ;
  GLContextMode arg6 ;
  optional< std::string > arg7 ;
  Size *argp1 ;
  optional< std::string > const *argp5 ;
  GLContextMode *argp6 ;
  optional< std::string > const *argp7 ;
  mbgl::HeadlessFrontend *result = 0 ;
  mbgl::HeadlessFrontend *_swig_go_result;
  
  
  argp1 = (Size *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg1 = (Size)*argp1;
  
  arg2 = (float)_swig_go_1; 
  arg3 = *(mbgl::FileSource **)&_swig_go_2; 
  arg4 = *(mbgl::Scheduler **)&_swig_go_3; 
  
  argp5 = (optional< std::string > *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< std::string > const");
  }
  arg5 = (optional< std::string >)*argp5;
  
  
  argp6 = (GLContextMode *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null GLContextMode");
  }
  arg6 = (GLContextMode)*argp6;
  
  
  argp7 = (optional< std::string > *)_swig_go_6;
  if (argp7 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< std::string > const");
  }
  arg7 = (optional< std::string >)*argp7;
  
  
  result = (mbgl::HeadlessFrontend *)new mbgl::HeadlessFrontend(arg1,arg2,*arg3,*arg4,arg5,arg6,arg7);
  *(mbgl::HeadlessFrontend **)&_swig_go_result = (mbgl::HeadlessFrontend *)result; 
  return _swig_go_result;
}


mbgl::HeadlessFrontend *_wrap_new_HeadlessFrontend__SWIG_5_mbgl_e07083a70cf0d8aa(Size *_swig_go_0, float _swig_go_1, mbgl::FileSource *_swig_go_2, mbgl::Scheduler *_swig_go_3, optional< std::string > *_swig_go_4, GLContextMode *_swig_go_5) {
  Size arg1 ;
  float arg2 ;
  mbgl::FileSource *arg3 = 0 ;
  mbgl::Scheduler *arg4 = 0 ;
  optional< std::string > arg5 ;
  GLContextMode arg6 ;
  Size *argp1 ;
  optional< std::string > const *argp5 ;
  GLContextMode *argp6 ;
  mbgl::HeadlessFrontend *result = 0 ;
  mbgl::HeadlessFrontend *_swig_go_result;
  
  
  argp1 = (Size *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg1 = (Size)*argp1;
  
  arg2 = (float)_swig_go_1; 
  arg3 = *(mbgl::FileSource **)&_swig_go_2; 
  arg4 = *(mbgl::Scheduler **)&_swig_go_3; 
  
  argp5 = (optional< std::string > *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< std::string > const");
  }
  arg5 = (optional< std::string >)*argp5;
  
  
  argp6 = (GLContextMode *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null GLContextMode");
  }
  arg6 = (GLContextMode)*argp6;
  
  
  result = (mbgl::HeadlessFrontend *)new mbgl::HeadlessFrontend(arg1,arg2,*arg3,*arg4,arg5,arg6);
  *(mbgl::HeadlessFrontend **)&_swig_go_result = (mbgl::HeadlessFrontend *)result; 
  return _swig_go_result;
}


mbgl::HeadlessFrontend *_wrap_new_HeadlessFrontend__SWIG_6_mbgl_e07083a70cf0d8aa(Size *_swig_go_0, float _swig_go_1, mbgl::FileSource *_swig_go_2, mbgl::Scheduler *_swig_go_3, optional< std::string > *_swig_go_4) {
  Size arg1 ;
  float arg2 ;
  mbgl::FileSource *arg3 = 0 ;
  mbgl::Scheduler *arg4 = 0 ;
  optional< std::string > arg5 ;
  Size *argp1 ;
  optional< std::string > const *argp5 ;
  mbgl::HeadlessFrontend *result = 0 ;
  mbgl::HeadlessFrontend *_swig_go_result;
  
  
  argp1 = (Size *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg1 = (Size)*argp1;
  
  arg2 = (float)_swig_go_1; 
  arg3 = *(mbgl::FileSource **)&_swig_go_2; 
  arg4 = *(mbgl::Scheduler **)&_swig_go_3; 
  
  argp5 = (optional< std::string > *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null optional< std::string > const");
  }
  arg5 = (optional< std::string >)*argp5;
  
  
  result = (mbgl::HeadlessFrontend *)new mbgl::HeadlessFrontend(arg1,arg2,*arg3,*arg4,arg5);
  *(mbgl::HeadlessFrontend **)&_swig_go_result = (mbgl::HeadlessFrontend *)result; 
  return _swig_go_result;
}


mbgl::HeadlessFrontend *_wrap_new_HeadlessFrontend__SWIG_7_mbgl_e07083a70cf0d8aa(Size *_swig_go_0, float _swig_go_1, mbgl::FileSource *_swig_go_2, mbgl::Scheduler *_swig_go_3) {
  Size arg1 ;
  float arg2 ;
  mbgl::FileSource *arg3 = 0 ;
  mbgl::Scheduler *arg4 = 0 ;
  Size *argp1 ;
  mbgl::HeadlessFrontend *result = 0 ;
  mbgl::HeadlessFrontend *_swig_go_result;
  
  
  argp1 = (Size *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg1 = (Size)*argp1;
  
  arg2 = (float)_swig_go_1; 
  arg3 = *(mbgl::FileSource **)&_swig_go_2; 
  arg4 = *(mbgl::Scheduler **)&_swig_go_3; 
  
  result = (mbgl::HeadlessFrontend *)new mbgl::HeadlessFrontend(arg1,arg2,*arg3,*arg4);
  *(mbgl::HeadlessFrontend **)&_swig_go_result = (mbgl::HeadlessFrontend *)result; 
  return _swig_go_result;
}


void _wrap_delete_HeadlessFrontend_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_HeadlessFrontend_reset_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  
  (arg1)->reset();
  
}


void _wrap_HeadlessFrontend_update_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0, std::shared_ptr< UpdateParameters > *_swig_go_1) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  std::shared_ptr< UpdateParameters > arg2 ;
  std::shared_ptr< UpdateParameters > *argp2 ;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  
  argp2 = (std::shared_ptr< UpdateParameters > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::shared_ptr< UpdateParameters >");
  }
  arg2 = (std::shared_ptr< UpdateParameters >)*argp2;
  
  
  (arg1)->update(arg2);
  
}


void _wrap_HeadlessFrontend_setObserver_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0, RendererObserver *_swig_go_1) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  RendererObserver *arg2 = 0 ;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  arg2 = *(RendererObserver **)&_swig_go_1; 
  
  (arg1)->setObserver(*arg2);
  
}


Size *_wrap_HeadlessFrontend_getSize_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  Size result;
  Size *_swig_go_result;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  
  result = ((mbgl::HeadlessFrontend const *)arg1)->getSize();
  *(Size **)&_swig_go_result = new Size(result); 
  return _swig_go_result;
}


void _wrap_HeadlessFrontend_setSize_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0, Size *_swig_go_1) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  Size arg2 ;
  Size *argp2 ;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  
  argp2 = (Size *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null Size");
  }
  arg2 = (Size)*argp2;
  
  
  (arg1)->setSize(arg2);
  
}


mbgl::Renderer *_wrap_HeadlessFrontend_getRenderer_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  mbgl::Renderer *result = 0 ;
  mbgl::Renderer *_swig_go_result;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  
  result = (mbgl::Renderer *)(arg1)->getRenderer();
  *(mbgl::Renderer **)&_swig_go_result = (mbgl::Renderer *)result; 
  return _swig_go_result;
}


mbgl::RendererBackend *_wrap_HeadlessFrontend_getBackend_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  mbgl::RendererBackend *result = 0 ;
  mbgl::RendererBackend *_swig_go_result;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  
  result = (mbgl::RendererBackend *)(arg1)->getBackend();
  *(mbgl::RendererBackend **)&_swig_go_result = (mbgl::RendererBackend *)result; 
  return _swig_go_result;
}


mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > *_wrap_HeadlessFrontend_readStillImage_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  SwigValueWrapper< mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > > result;
  mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > *_swig_go_result;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  
  result = (arg1)->readStillImage();
  *(mbgl::PremultipliedImage **)&_swig_go_result = new mbgl::PremultipliedImage(result); 
  return _swig_go_result;
}


mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > *_wrap_HeadlessFrontend_render_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0, mbgl::Map *_swig_go_1) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  mbgl::Map *arg2 = 0 ;
  SwigValueWrapper< mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > > result;
  mbgl::Image< enum mbgl::ImageAlphaMode::Premultiplied > *_swig_go_result;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  arg2 = *(mbgl::Map **)&_swig_go_1; 
  
  result = (arg1)->render(*arg2);
  *(mbgl::PremultipliedImage **)&_swig_go_result = new mbgl::PremultipliedImage(result); 
  return _swig_go_result;
}


optional< mbgl::TransformState > *_wrap_HeadlessFrontend_getTransformState_mbgl_e07083a70cf0d8aa(mbgl::HeadlessFrontend *_swig_go_0) {
  mbgl::HeadlessFrontend *arg1 = (mbgl::HeadlessFrontend *) 0 ;
  SwigValueWrapper< optional< mbgl::TransformState > > result;
  optional< mbgl::TransformState > *_swig_go_result;
  
  arg1 = *(mbgl::HeadlessFrontend **)&_swig_go_0; 
  
  result = ((mbgl::HeadlessFrontend const *)arg1)->getTransformState();
  *(optional< mbgl::TransformState > **)&_swig_go_result = new optional< mbgl::TransformState >(result); 
  return _swig_go_result;
}


mbgl::ThreadPool *_wrap_new_ThreadPool_mbgl_e07083a70cf0d8aa(std::size_t *_swig_go_0) {
  std::size_t arg1 ;
  std::size_t *argp1 ;
  mbgl::ThreadPool *result = 0 ;
  mbgl::ThreadPool *_swig_go_result;
  
  
  argp1 = (std::size_t *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::size_t");
  }
  arg1 = (std::size_t)*argp1;
  
  
  result = (mbgl::ThreadPool *)new mbgl::ThreadPool(arg1);
  *(mbgl::ThreadPool **)&_swig_go_result = (mbgl::ThreadPool *)result; 
  return _swig_go_result;
}


void _wrap_delete_ThreadPool_mbgl_e07083a70cf0d8aa(mbgl::ThreadPool *_swig_go_0) {
  mbgl::ThreadPool *arg1 = (mbgl::ThreadPool *) 0 ;
  
  arg1 = *(mbgl::ThreadPool **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_ThreadPool_schedule_mbgl_e07083a70cf0d8aa(mbgl::ThreadPool *_swig_go_0, std::weak_ptr< Mailbox > *_swig_go_1) {
  mbgl::ThreadPool *arg1 = (mbgl::ThreadPool *) 0 ;
  std::weak_ptr< Mailbox > arg2 ;
  std::weak_ptr< Mailbox > *argp2 ;
  
  arg1 = *(mbgl::ThreadPool **)&_swig_go_0; 
  
  argp2 = (std::weak_ptr< Mailbox > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::weak_ptr< Mailbox >");
  }
  arg2 = (std::weak_ptr< Mailbox >)*argp2;
  
  
  (arg1)->schedule(arg2);
  
}


mbgl::DefaultFileSource *_wrap_new_DefaultFileSource__SWIG_0_mbgl_e07083a70cf0d8aa(std::string *_swig_go_0, std::string *_swig_go_1, uint64_t *_swig_go_2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  uint64_t arg3 ;
  uint64_t *argp3 ;
  mbgl::DefaultFileSource *result = 0 ;
  mbgl::DefaultFileSource *_swig_go_result;
  
  arg1 = *(std::string **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  argp3 = (uint64_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null uint64_t");
  }
  arg3 = (uint64_t)*argp3;
  
  
  result = (mbgl::DefaultFileSource *)new mbgl::DefaultFileSource((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  *(mbgl::DefaultFileSource **)&_swig_go_result = (mbgl::DefaultFileSource *)result; 
  return _swig_go_result;
}


mbgl::DefaultFileSource *_wrap_new_DefaultFileSource__SWIG_1_mbgl_e07083a70cf0d8aa(std::string *_swig_go_0, std::string *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  mbgl::DefaultFileSource *result = 0 ;
  mbgl::DefaultFileSource *_swig_go_result;
  
  arg1 = *(std::string **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (mbgl::DefaultFileSource *)new mbgl::DefaultFileSource((std::string const &)*arg1,(std::string const &)*arg2);
  *(mbgl::DefaultFileSource **)&_swig_go_result = (mbgl::DefaultFileSource *)result; 
  return _swig_go_result;
}


mbgl::DefaultFileSource *_wrap_new_DefaultFileSource__SWIG_2_mbgl_e07083a70cf0d8aa(std::string *_swig_go_0, std::unique_ptr< mbgl::FileSource > *_swig_go_1, uint64_t *_swig_go_2) {
  std::string *arg1 = 0 ;
  std::unique_ptr< mbgl::FileSource > *arg2 = 0 ;
  uint64_t arg3 ;
  uint64_t *argp3 ;
  mbgl::DefaultFileSource *result = 0 ;
  mbgl::DefaultFileSource *_swig_go_result;
  
  arg1 = *(std::string **)&_swig_go_0; 
  arg2 = *(std::unique_ptr< mbgl::FileSource > **)&_swig_go_1; 
  
  argp3 = (uint64_t *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null uint64_t");
  }
  arg3 = (uint64_t)*argp3;
  
  
  result = (mbgl::DefaultFileSource *)new mbgl::DefaultFileSource((std::string const &)*arg1,(std::unique_ptr< mbgl::FileSource > &&)*arg2,arg3);
  *(mbgl::DefaultFileSource **)&_swig_go_result = (mbgl::DefaultFileSource *)result; 
  return _swig_go_result;
}


mbgl::DefaultFileSource *_wrap_new_DefaultFileSource__SWIG_3_mbgl_e07083a70cf0d8aa(std::string *_swig_go_0, std::unique_ptr< mbgl::FileSource > *_swig_go_1) {
  std::string *arg1 = 0 ;
  std::unique_ptr< mbgl::FileSource > *arg2 = 0 ;
  mbgl::DefaultFileSource *result = 0 ;
  mbgl::DefaultFileSource *_swig_go_result;
  
  arg1 = *(std::string **)&_swig_go_0; 
  arg2 = *(std::unique_ptr< mbgl::FileSource > **)&_swig_go_1; 
  
  result = (mbgl::DefaultFileSource *)new mbgl::DefaultFileSource((std::string const &)*arg1,(std::unique_ptr< mbgl::FileSource > &&)*arg2);
  *(mbgl::DefaultFileSource **)&_swig_go_result = (mbgl::DefaultFileSource *)result; 
  return _swig_go_result;
}


void _wrap_delete_DefaultFileSource_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  
  delete arg1;
  
}


bool _wrap_DefaultFileSource_supportsCacheOnlyRequests_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  
  result = (bool)((mbgl::DefaultFileSource const *)arg1)->supportsCacheOnlyRequests();
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_DefaultFileSource_setAPIBaseURL_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, std::string *_swig_go_1) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->setAPIBaseURL((std::string const &)*arg2);
  
}


std::string *_wrap_DefaultFileSource_getAPIBaseURL_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  
  result = (arg1)->getAPIBaseURL();
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


void _wrap_DefaultFileSource_setAccessToken_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, std::string *_swig_go_1) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->setAccessToken((std::string const &)*arg2);
  
}


std::string *_wrap_DefaultFileSource_getAccessToken_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  
  result = (arg1)->getAccessToken();
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


void _wrap_DefaultFileSource_setResourceTransform_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, optional< ActorRef< mbgl::ResourceTransform > > *_swig_go_1) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  optional< ActorRef< mbgl::ResourceTransform > > *arg2 = 0 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(optional< ActorRef< mbgl::ResourceTransform > > **)&_swig_go_1; 
  
  (arg1)->setResourceTransform((optional< ActorRef< mbgl::ResourceTransform > > &&)*arg2);
  
}


std::unique_ptr< AsyncRequest > *_wrap_DefaultFileSource_request_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, Resource *_swig_go_1, Callback *_swig_go_2) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  Resource *arg2 = 0 ;
  Callback arg3 ;
  Callback *argp3 ;
  std::unique_ptr< AsyncRequest > result;
  std::unique_ptr< AsyncRequest > *_swig_go_result;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(Resource **)&_swig_go_1; 
  
  argp3 = (Callback *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null Callback");
  }
  arg3 = (Callback)*argp3;
  
  
  result = (arg1)->request((Resource const &)*arg2,arg3);
  *(std::unique_ptr< AsyncRequest > **)&_swig_go_result = new std::unique_ptr< AsyncRequest >(result); 
  return _swig_go_result;
}


void _wrap_DefaultFileSource_listOfflineRegions_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, std::function< void (std::exception_ptr,optional< std::vector< OfflineRegion > >) > *_swig_go_1) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  std::function< void (std::exception_ptr,optional< std::vector< OfflineRegion > >) > arg2 ;
  std::function< void (std::exception_ptr,optional< std::vector< OfflineRegion > >) > *argp2 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  
  argp2 = (std::function< void (std::exception_ptr,optional< std::vector< OfflineRegion > >) > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::function< void (std::exception_ptr,optional< std::vector< OfflineRegion > >) >");
  }
  arg2 = (std::function< void (std::exception_ptr,optional< std::vector< OfflineRegion > >) >)*argp2;
  
  
  (arg1)->listOfflineRegions(arg2);
  
}


void _wrap_DefaultFileSource_createOfflineRegion_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, OfflineRegionDefinition *_swig_go_1, OfflineRegionMetadata *_swig_go_2, std::function< void (std::exception_ptr,optional< OfflineRegion >) > *_swig_go_3) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  OfflineRegionDefinition *arg2 = 0 ;
  OfflineRegionMetadata *arg3 = 0 ;
  std::function< void (std::exception_ptr,optional< OfflineRegion >) > arg4 ;
  std::function< void (std::exception_ptr,optional< OfflineRegion >) > *argp4 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(OfflineRegionDefinition **)&_swig_go_1; 
  arg3 = *(OfflineRegionMetadata **)&_swig_go_2; 
  
  argp4 = (std::function< void (std::exception_ptr,optional< OfflineRegion >) > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::function< void (std::exception_ptr,optional< OfflineRegion >) >");
  }
  arg4 = (std::function< void (std::exception_ptr,optional< OfflineRegion >) >)*argp4;
  
  
  (arg1)->createOfflineRegion((OfflineRegionDefinition const &)*arg2,(OfflineRegionMetadata const &)*arg3,arg4);
  
}


void _wrap_DefaultFileSource_updateOfflineMetadata_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, int64_t *_swig_go_1, OfflineRegionMetadata *_swig_go_2, std::function< void (std::exception_ptr,optional< OfflineRegionMetadata >) > *_swig_go_3) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  int64_t arg2 ;
  OfflineRegionMetadata *arg3 = 0 ;
  std::function< void (std::exception_ptr,optional< OfflineRegionMetadata >) > arg4 ;
  int64_t const *argp2 ;
  std::function< void (std::exception_ptr,optional< OfflineRegionMetadata >) > *argp4 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  
  argp2 = (int64_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null int64_t const");
  }
  arg2 = (int64_t)*argp2;
  
  arg3 = *(OfflineRegionMetadata **)&_swig_go_2; 
  
  argp4 = (std::function< void (std::exception_ptr,optional< OfflineRegionMetadata >) > *)_swig_go_3;
  if (argp4 == NULL) {
    _swig_gopanic("Attempt to dereference null std::function< void (std::exception_ptr,optional< OfflineRegionMetadata >) >");
  }
  arg4 = (std::function< void (std::exception_ptr,optional< OfflineRegionMetadata >) >)*argp4;
  
  
  (arg1)->updateOfflineMetadata(arg2,(OfflineRegionMetadata const &)*arg3,arg4);
  
}


void _wrap_DefaultFileSource_setOfflineRegionObserver_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, OfflineRegion *_swig_go_1, std::unique_ptr< OfflineRegionObserver > *_swig_go_2) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  OfflineRegion *arg2 = 0 ;
  std::unique_ptr< OfflineRegionObserver > arg3 ;
  std::unique_ptr< OfflineRegionObserver > *argp3 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(OfflineRegion **)&_swig_go_1; 
  
  argp3 = (std::unique_ptr< OfflineRegionObserver > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::unique_ptr< OfflineRegionObserver >");
  }
  arg3 = (std::unique_ptr< OfflineRegionObserver >)*argp3;
  
  
  (arg1)->setOfflineRegionObserver(*arg2,arg3);
  
}


void _wrap_DefaultFileSource_setOfflineRegionDownloadState_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, OfflineRegion *_swig_go_1, OfflineRegionDownloadState *_swig_go_2) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  OfflineRegion *arg2 = 0 ;
  OfflineRegionDownloadState arg3 ;
  OfflineRegionDownloadState *argp3 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(OfflineRegion **)&_swig_go_1; 
  
  argp3 = (OfflineRegionDownloadState *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null OfflineRegionDownloadState");
  }
  arg3 = (OfflineRegionDownloadState)*argp3;
  
  
  (arg1)->setOfflineRegionDownloadState(*arg2,arg3);
  
}


void _wrap_DefaultFileSource_getOfflineRegionStatus_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, OfflineRegion *_swig_go_1, std::function< void (std::exception_ptr,optional< OfflineRegionStatus >) > *_swig_go_2) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  OfflineRegion *arg2 = 0 ;
  std::function< void (std::exception_ptr,optional< OfflineRegionStatus >) > arg3 ;
  std::function< void (std::exception_ptr,optional< OfflineRegionStatus >) > *argp3 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(OfflineRegion **)&_swig_go_1; 
  
  argp3 = (std::function< void (std::exception_ptr,optional< OfflineRegionStatus >) > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::function< void (std::exception_ptr,optional< OfflineRegionStatus >) >");
  }
  arg3 = (std::function< void (std::exception_ptr,optional< OfflineRegionStatus >) >)*argp3;
  
  
  ((mbgl::DefaultFileSource const *)arg1)->getOfflineRegionStatus(*arg2,arg3);
  
}


void _wrap_DefaultFileSource_deleteOfflineRegion_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, OfflineRegion *_swig_go_1, std::function< void (std::exception_ptr) > *_swig_go_2) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  OfflineRegion *arg2 = 0 ;
  std::function< void (std::exception_ptr) > arg3 ;
  std::function< void (std::exception_ptr) > *argp3 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(OfflineRegion **)&_swig_go_1; 
  
  argp3 = (std::function< void (std::exception_ptr) > *)_swig_go_2;
  if (argp3 == NULL) {
    _swig_gopanic("Attempt to dereference null std::function< void (std::exception_ptr) >");
  }
  arg3 = (std::function< void (std::exception_ptr) >)*argp3;
  
  
  (arg1)->deleteOfflineRegion((OfflineRegion &&)*arg2,arg3);
  
}


void _wrap_DefaultFileSource_setOfflineMapboxTileCountLimit_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, uint64_t *_swig_go_1) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  
  argp2 = (uint64_t *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null uint64_t");
  }
  arg2 = (uint64_t)*argp2;
  
  
  ((mbgl::DefaultFileSource const *)arg1)->setOfflineMapboxTileCountLimit(arg2);
  
}


void _wrap_DefaultFileSource_pause_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  
  (arg1)->pause();
  
}


void _wrap_DefaultFileSource_resume_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  
  (arg1)->resume();
  
}


void _wrap_DefaultFileSource_setOnlineStatus_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, bool _swig_go_1) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  bool arg2 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  (arg1)->setOnlineStatus(arg2);
  
}


void _wrap_DefaultFileSource_put_mbgl_e07083a70cf0d8aa(mbgl::DefaultFileSource *_swig_go_0, Resource *_swig_go_1, Response *_swig_go_2) {
  mbgl::DefaultFileSource *arg1 = (mbgl::DefaultFileSource *) 0 ;
  Resource *arg2 = 0 ;
  Response *arg3 = 0 ;
  
  arg1 = *(mbgl::DefaultFileSource **)&_swig_go_0; 
  arg2 = *(Resource **)&_swig_go_1; 
  arg3 = *(Response **)&_swig_go_2; 
  
  (arg1)->put((Resource const &)*arg2,(Response const &)*arg3);
  
}


mbgl::style::Style *_wrap_new_Style_mbgl_e07083a70cf0d8aa(mbgl::Scheduler *_swig_go_0, mbgl::FileSource *_swig_go_1, float _swig_go_2) {
  mbgl::Scheduler *arg1 = 0 ;
  mbgl::FileSource *arg2 = 0 ;
  float arg3 ;
  mbgl::style::Style *result = 0 ;
  mbgl::style::Style *_swig_go_result;
  
  arg1 = *(mbgl::Scheduler **)&_swig_go_0; 
  arg2 = *(mbgl::FileSource **)&_swig_go_1; 
  arg3 = (float)_swig_go_2; 
  
  result = (mbgl::style::Style *)new mbgl::style::Style(*arg1,*arg2,arg3);
  *(mbgl::style::Style **)&_swig_go_result = (mbgl::style::Style *)result; 
  return _swig_go_result;
}


void _wrap_delete_Style_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  delete arg1;
  
}


void _wrap_Style_loadJSON_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->loadJSON((std::string const &)*arg2);
  
}


void _wrap_Style_loadURL_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->loadURL((std::string const &)*arg2);
  
}


std::string *_wrap_Style_getJSON_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = ((mbgl::style::Style const *)arg1)->getJSON();
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


std::string *_wrap_Style_getURL_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = ((mbgl::style::Style const *)arg1)->getURL();
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


std::string *_wrap_Style_getName_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string result;
  std::string *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = ((mbgl::style::Style const *)arg1)->getName();
  *(std::string **)&_swig_go_result = new std::string(result); 
  return _swig_go_result;
}


CameraOptions *_wrap_Style_getDefaultCamera_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  CameraOptions result;
  CameraOptions *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = ((mbgl::style::Style const *)arg1)->getDefaultCamera();
  *(CameraOptions **)&_swig_go_result = new CameraOptions(result); 
  return _swig_go_result;
}


TransitionOptions *_wrap_Style_getTransitionOptions_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  TransitionOptions result;
  TransitionOptions *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = ((mbgl::style::Style const *)arg1)->getTransitionOptions();
  *(TransitionOptions **)&_swig_go_result = new TransitionOptions(result); 
  return _swig_go_result;
}


void _wrap_Style_setTransitionOptions_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, TransitionOptions *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  TransitionOptions *arg2 = 0 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(TransitionOptions **)&_swig_go_1; 
  
  (arg1)->setTransitionOptions((TransitionOptions const &)*arg2);
  
}


mbgl::style::Light *_wrap_Style_getLight__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  mbgl::style::Light *result = 0 ;
  mbgl::style::Light *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = (mbgl::style::Light *)(arg1)->getLight();
  *(mbgl::style::Light **)&_swig_go_result = (mbgl::style::Light *)result; 
  return _swig_go_result;
}


mbgl::style::Light *_wrap_Style_getLight__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  mbgl::style::Light *result = 0 ;
  mbgl::style::Light *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = (mbgl::style::Light *)((mbgl::style::Style const *)arg1)->getLight();
  *(mbgl::style::Light **)&_swig_go_result = (mbgl::style::Light *)result; 
  return _swig_go_result;
}


void _wrap_Style_setLight_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::unique_ptr< mbgl::style::Light > *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  SwigValueWrapper< std::unique_ptr< mbgl::style::Light > > arg2 ;
  std::unique_ptr< mbgl::style::Light > *argp2 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  argp2 = (std::unique_ptr< mbgl::style::Light > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::unique_ptr< mbgl::style::Light >");
  }
  arg2 = (std::unique_ptr< mbgl::style::Light >)*argp2;
  
  
  (arg1)->setLight(arg2);
  
}


mbgl::style::Image *_wrap_Style_getImage_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  mbgl::style::Image *result = 0 ;
  mbgl::style::Image *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (mbgl::style::Image *)((mbgl::style::Style const *)arg1)->getImage((std::string const &)*arg2);
  *(mbgl::style::Image **)&_swig_go_result = (mbgl::style::Image *)result; 
  return _swig_go_result;
}


void _wrap_Style_addImage_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::unique_ptr< mbgl::style::Image > *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  SwigValueWrapper< std::unique_ptr< mbgl::style::Image > > arg2 ;
  std::unique_ptr< mbgl::style::Image > *argp2 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  argp2 = (std::unique_ptr< mbgl::style::Image > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::unique_ptr< mbgl::style::Image >");
  }
  arg2 = (std::unique_ptr< mbgl::style::Image >)*argp2;
  
  
  (arg1)->addImage(arg2);
  
}


void _wrap_Style_removeImage_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  (arg1)->removeImage((std::string const &)*arg2);
  
}


std::vector< mbgl::style::Source * > *_wrap_Style_getSources__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  SwigValueWrapper< std::vector< mbgl::style::Source * > > result;
  std::vector< mbgl::style::Source * > *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = (arg1)->getSources();
  *(std::vector< mbgl::style::Source * > **)&_swig_go_result = new std::vector< mbgl::style::Source * >(result); 
  return _swig_go_result;
}


std::vector< mbgl::style::Source const * > *_wrap_Style_getSources__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  SwigValueWrapper< std::vector< mbgl::style::Source const * > > result;
  std::vector< mbgl::style::Source const * > *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = ((mbgl::style::Style const *)arg1)->getSources();
  *(std::vector< mbgl::style::Source const * > **)&_swig_go_result = new std::vector< mbgl::style::Source const * >(result); 
  return _swig_go_result;
}


mbgl::style::Source *_wrap_Style_getSource__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  mbgl::style::Source *result = 0 ;
  mbgl::style::Source *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (mbgl::style::Source *)(arg1)->getSource((std::string const &)*arg2);
  *(mbgl::style::Source **)&_swig_go_result = (mbgl::style::Source *)result; 
  return _swig_go_result;
}


mbgl::style::Source *_wrap_Style_getSource__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  mbgl::style::Source *result = 0 ;
  mbgl::style::Source *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (mbgl::style::Source *)((mbgl::style::Style const *)arg1)->getSource((std::string const &)*arg2);
  *(mbgl::style::Source **)&_swig_go_result = (mbgl::style::Source *)result; 
  return _swig_go_result;
}


void _wrap_Style_addSource_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::unique_ptr< mbgl::style::Source > *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  SwigValueWrapper< std::unique_ptr< mbgl::style::Source > > arg2 ;
  std::unique_ptr< mbgl::style::Source > *argp2 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  argp2 = (std::unique_ptr< mbgl::style::Source > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::unique_ptr< mbgl::style::Source >");
  }
  arg2 = (std::unique_ptr< mbgl::style::Source >)*argp2;
  
  
  (arg1)->addSource(arg2);
  
}


std::unique_ptr< mbgl::style::Source > *_wrap_Style_removeSource_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::unique_ptr< mbgl::style::Source > > result;
  std::unique_ptr< mbgl::style::Source > *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (arg1)->removeSource((std::string const &)*arg2);
  *(std::unique_ptr< mbgl::style::Source > **)&_swig_go_result = new std::unique_ptr< mbgl::style::Source >(result); 
  return _swig_go_result;
}


std::vector< mbgl::style::Layer * > *_wrap_Style_getLayers__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  SwigValueWrapper< std::vector< mbgl::style::Layer * > > result;
  std::vector< mbgl::style::Layer * > *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = (arg1)->getLayers();
  *(std::vector< mbgl::style::Layer * > **)&_swig_go_result = new std::vector< mbgl::style::Layer * >(result); 
  return _swig_go_result;
}


std::vector< mbgl::style::Layer const * > *_wrap_Style_getLayers__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  SwigValueWrapper< std::vector< mbgl::style::Layer const * > > result;
  std::vector< mbgl::style::Layer const * > *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = ((mbgl::style::Style const *)arg1)->getLayers();
  *(std::vector< mbgl::style::Layer const * > **)&_swig_go_result = new std::vector< mbgl::style::Layer const * >(result); 
  return _swig_go_result;
}


mbgl::style::Layer *_wrap_Style_getLayer__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  mbgl::style::Layer *result = 0 ;
  mbgl::style::Layer *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (mbgl::style::Layer *)(arg1)->getLayer((std::string const &)*arg2);
  *(mbgl::style::Layer **)&_swig_go_result = (mbgl::style::Layer *)result; 
  return _swig_go_result;
}


mbgl::style::Layer *_wrap_Style_getLayer__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  mbgl::style::Layer *result = 0 ;
  mbgl::style::Layer *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (mbgl::style::Layer *)((mbgl::style::Style const *)arg1)->getLayer((std::string const &)*arg2);
  *(mbgl::style::Layer **)&_swig_go_result = (mbgl::style::Layer *)result; 
  return _swig_go_result;
}


void _wrap_Style_addLayer__SWIG_0_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::unique_ptr< mbgl::style::Layer > *_swig_go_1, optional< std::string > *_swig_go_2) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  SwigValueWrapper< std::unique_ptr< mbgl::style::Layer > > arg2 ;
  optional< std::string > *arg3 = 0 ;
  std::unique_ptr< mbgl::style::Layer > *argp2 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  argp2 = (std::unique_ptr< mbgl::style::Layer > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::unique_ptr< mbgl::style::Layer >");
  }
  arg2 = (std::unique_ptr< mbgl::style::Layer >)*argp2;
  
  arg3 = *(optional< std::string > **)&_swig_go_2; 
  
  (arg1)->addLayer(arg2,(optional< std::string > const &)*arg3);
  
}


void _wrap_Style_addLayer__SWIG_1_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::unique_ptr< mbgl::style::Layer > *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  SwigValueWrapper< std::unique_ptr< mbgl::style::Layer > > arg2 ;
  std::unique_ptr< mbgl::style::Layer > *argp2 ;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  argp2 = (std::unique_ptr< mbgl::style::Layer > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::unique_ptr< mbgl::style::Layer >");
  }
  arg2 = (std::unique_ptr< mbgl::style::Layer >)*argp2;
  
  
  (arg1)->addLayer(arg2);
  
}


std::unique_ptr< mbgl::style::Layer > *_wrap_Style_removeLayer_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0, std::string *_swig_go_1) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::unique_ptr< mbgl::style::Layer > > result;
  std::unique_ptr< mbgl::style::Layer > *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  
  result = (arg1)->removeLayer((std::string const &)*arg2);
  *(std::unique_ptr< mbgl::style::Layer > **)&_swig_go_result = new std::unique_ptr< mbgl::style::Layer >(result); 
  return _swig_go_result;
}


std::unique_ptr< mbgl::style::Style::Impl > *_wrap_Style_impl_get_mbgl_e07083a70cf0d8aa(mbgl::style::Style *_swig_go_0) {
  mbgl::style::Style *arg1 = (mbgl::style::Style *) 0 ;
  std::unique_ptr< mbgl::style::Style::Impl > *result = 0 ;
  std::unique_ptr< mbgl::style::Style::Impl > *_swig_go_result;
  
  arg1 = *(mbgl::style::Style **)&_swig_go_0; 
  
  result = (std::unique_ptr< mbgl::style::Style::Impl > *)& ((arg1)->impl);
  *(std::unique_ptr< mbgl::style::Style::Impl > **)&_swig_go_result = (std::unique_ptr< mbgl::style::Style::Impl > *)result; 
  return _swig_go_result;
}


#ifdef __cplusplus
}
#endif

